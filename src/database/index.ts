import sqlite3 from 'sqlite3';

const DB_PATH = './data/db.sqlite';

const db = new sqlite3.Database(DB_PATH, (err) => {
  if (err) {
    console.error('Erro ao conectar ao banco de dados:', err);
  } else {
    console.log('ConexÃ£o com o banco de dados estabelecida.');
  }
});

db.serialize(() => {
  db.run(`
    CREATE TABLE IF NOT EXISTS TABELA_INSTITUICAO (
      ID INTEGER PRIMARY KEY AUTOINCREMENT,
      NOME_INSTITUICAO VARCHAR NOT NULL,
      TELEFONE VARCHAR NOT NULL,
      SITE VARCHAR,
      INSTITUICAO_SLUG VARCHAR NOT NULL,
      IMG_LOGO_URL VARCHAR,
      EMAIL VARCHAR NOT NULL,
      RUA VARCHAR NOT NULL,
      BAIRRO VARCHAR NOT NULL,
      NUM INT NOT NULL,
      COMPLEMENTO VARCHAR,
      CEP VARCHAR NOT NULL,
      CIDADE VARCHAR NOT NULL,
      UF VARCHAR NOT NULL
    )
  `);

  db.run(`
    CREATE TABLE IF NOT EXISTS TABELA_CATEGORIA_CURSO (
      ID INTEGER PRIMARY KEY AUTOINCREMENT,
      NOME_CATEGORIA VARCHAR NOT NULL,
      IMG_URL VARCHAR NOT NULL,
      CATEGORIA_SLUG VARCHAR NOT NULL
    )
  `);

  db.run(`
    CREATE TABLE IF NOT EXISTS TABELA_CURSO (
      ID INTEGER PRIMARY KEY AUTOINCREMENT,
      NOME VARCHAR NOT NULL,
      ID_CATEGORIA_CURSO INT,
      CURSO_SLUG VARCHAR NOT NULL,
      IMG_URL VARCHAR NOT NULL,
      DESCRICAO VARCHAR NOT NULL,
      FOREIGN KEY (ID_CATEGORIA_CURSO) REFERENCES TABELA_CATEGORIA_CURSO (ID)
    )
  `);

  db.run(`
    CREATE TABLE IF NOT EXISTS TABELA_CURSO_INSTITUICAO (
      CURSO_ID INTEGER,
      INSTITUICAO_ID INTEGER,
      FOREIGN KEY (CURSO_ID) REFERENCES TABELA_CURSO (ID),
      FOREIGN KEY (INSTITUICAO_ID) REFERENCES TABELA_INSTITUICAO (ID),
      PRIMARY KEY (CURSO_ID, INSTITUICAO_ID)
    )
  `);
});

export default db;
